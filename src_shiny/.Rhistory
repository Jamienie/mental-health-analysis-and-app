install.packages("xtable", type="source")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
.libPaths()
R_LIBS=C:/Users/fanfan/Documents/R/win-library/3.5
.libPaths()
Rscript -e "library(IRkernel)"
install.packages(BH)
install.packages("BH")
install.packages("bindr")
install.packages("bindrcpp")
install.packages("bitops")
install.packages("bmp")
install.packages("bookdown")
install.packages("broom")
install.packages("Cairo")
install.packages("caTools")
install.packages("cellrange")
install.packages("colorspace")
install.packages("countrycode")
install.packages("crosstalk")
install.packages("data.table")
install.packages("DBI")
install.packages("dbplyr")
install.packages("devtools")
install.packages("downloader")
install.packages("forcats")
install.packages("foreign")
install.packages("formatR")
install.packages("gapminder")
install.packages("geosphere")
install.packages("GGally")
install.packages("ggmap")
install.packages("gmm")
install.packages("gridExtra")
install.packages("haven")
install.packages("here")
install.packages("hexbin")
install.packages("htmlwidgets")
install.packages("igraph")
install.packages("imager")
install.packages("infer")
install.packages("listviewer")
install.packages("lubridate")
install.packages("mixpack")
install.packages("modelr")
install.packages("nycflights13")
install.packages("pryr")
install.packages("readxl")
install.packages("rematch2")
install.packages("reprex")
install.packages("repurrrsive")
install.packages("reticulate")
install.packages("rsconnect")
install.packages("survival")
install.packages("tmvtnorm")
install.packages("xaringan")
install.packages("base")
install.packages("base")
install.packages("base")
library(DBI)
library(nycflights13)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "flights", flights)
dbListTables(con)
library(DBI)
library(nycflights13)
flights <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights, "flights", flights)
dbListTables(flights)
dbListTables(con)
library(DBI)
library(nycflights13)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "flights", flights)
dbListTables(con)
View(flights)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbListTables(flights.db)
dbWriteTable(flights.db, "planes", planes)
dbListTables(flights.db)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbListTables(flights.db)
dbWriteTable(flights.db, "planes", planes)
dbListTables(flights.db)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbWriteTable(flights.db, "planes", planes)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbWriteTable(flights.db, "planes", planes)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
dbDisconnect(flights.db)
install.packages("tidyverse")
library(dplyr)
flights2008 <- dbConnect(drv=RSQLite::SQLite(), dbname="flights.db")
flights2008 <- tbl(flights2008, "flights")
flights2008 <- dbConnect(drv=RSQLite::SQLite(), dbname="flights.db")
dbListTables(flights.db)
flights2008 <- tbl(flights2008, "flights")
dbDisconnect(flights.db)
install.packages("bcmaps")
library(DBI)
library(nycflights13)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbWriteTable(flights.db, "planes", planes)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
dbDisconnect(flights.db)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
flights2008 <- dbConnect(SQLite(), "flights2008.db")
dbListTables(flights2008)
flights2008 <- tbl(flights2008, "flights")
#View(flights2008)
#head(flights2008)
busiest_airports <- flights2008 %>%
group_by(Origin)%>%
tally() %>%
arrange(desc(n))
head(busiest_airports, 10)
library(RSQLite)
library(dplyr)
library(tidyr)
library(tidyverse)
flights2008 <- dbConnect(SQLite(), "flights2008.db")
dbListTables(flights2008)
flights2008 <- tbl(flights2008, "flights")
#View(flights2008)
#head(flights2008)
busiest_airports <- flights2008 %>%
group_by(Origin)%>%
tally() %>%
arrange(desc(n))
head(busiest_airports, 10)
install.packages("testthat")
install.packages("sys")
install.packages("collection")
install.packages("wordcount")
install.packages("collections")
install.packages("wordcount")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
.libPaths()
.libPaths()
`.libPaths()`
.libPaths()
install.packages("plotly")
install.packages("car")
shiny::runApp('block4/DSCI_532_lecture_activity_shiny_app/DSCI_532_BCL')
shiny::runApp('block4/DSCI_532_project/mental-health-analysis-and-app/shiny_app')
rsconnect::setAccountInfo(name='my-data-science',
token='44490D62F5828E42FA513887CEE5C1AE',
secret='TYU9s7AyQGRCUjGLGZJAB4mmuTVxJ1A8M+0FRdBI')
library(rsconnect)
R --version
install.packages("installr")
library(installr)
setwd("~/")
updateR()
library(installr)
version
library(installr)
updateR()
rsconnect::setAccountInfo(name='my-data-science',
token='44490D62F5828E42FA513887CEE5C1AE',
secret='TYU9s7AyQGRCUjGLGZJAB4mmuTVxJ1A8M+0FRdBI')
library(rsconnect)
setwd("~/block4")
setwd("~/block4/DSCI_532_project/mental-health-analysis-and-app")
shiny::runApp('src_shiny')
runApp('src_shiny')
runApp('src_shiny')
runApp('src_shiny')
# Collect and scale mental health attiude columns
df_attitudes <- df %>%
select(col_attitudes) %>%
mutate_all(funs(as.numeric(.))) %>%
mutate_all(funs(rescale(.)))
df <- read_csv("clean_survey.csv")
df <- read_csv("clean_survey.csv")
setwd("~/block4/DSCI_532_project/mental-health-analysis-and-app/src_shiny")
# Factorize the survey responses in an order consistent with negative to positive attitudes towards mental health
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
df <- read_csv("clean_survey.csv")
# Factorize the survey responses in an order consistent with negative to positive attitudes towards mental health
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
View(df_attitudes)
source('~/block4/DSCI_532_project/mental-health-analysis-and-app/src_shiny/test.R')
# Factorize the survey responses in an order consistent with negative to positive attitudes towards mental health
df <- read_csv("clean_survey.csv")
View(df)
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
library(tidyverse)
library(scales)
df <- read_csv("clean_survey.csv")
# Factorize the survey responses in an order consistent with negative to positive attitudes towards mental health
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
col_backround_info <- colnames(df)[1:12]
col_employer_policies <-c("Does employer provide mental health benefits?" = "benefits",
"Is there available info on care options" = "care_options",
"Has employer discussed mental health as part of a wellness program?" = "wellness_program",
"Are there employer provided resources on how to seek help?" = "seek_help",
"Is anonymity protected if using resources?" = "anonymity",
"How easy is it to take leave for mental health?" = "leave")
col_attitudes <- c("1. Mental Health Consequence" =  "mental_health_consequence",
"2. Physical Health Consequene" = "phys_health_consequence",
"3. Talk with Coworkers" = "coworkers",
"4. Talk with Supervisor" = "supervisor",
"5. Discuss Mental Health at Interview" = "mental_health_interview",
"6. Discuss Physical Health at Interview" = "phys_health_interview",
"7. Mental vs Physical Health" = "mental_vs_physical",
"8. Observed consequences" = "obs_consequence")
runApp()
df_attitudes <- df %>%
select(col_attitudes) %>%
mutate_all(funs(as.numeric(.))) %>%
mutate_all(funs(rescale(.)))
VIew(df_attitudes)
View(df_attitudes)
data <- df_attitudes %>% slice(c(0:1)) %>%
t() %>%
as.data.frame() %>%
add_rownames() %>%
arrange(V1) %>%
mutate(rowname=factor(rowname, rowname)) %>%
gather(key=name, value=mark, -1)
df_attitude %>% ggplot( aes(x=rowname, y=mark)) +
geom_bar(stat="identity", fill="#69b3a2", width=0.6) +
coord_flip() +
theme_ipsum() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text( size=48 )
) +
ylim(0,20) +
ylab("mark") +
xlab("") +
facet_wrap(~name, ncol=4)
df_attitudes %>% ggplot( aes(x=rowname, y=mark)) +
geom_bar(stat="identity", fill="#69b3a2", width=0.6) +
coord_flip() +
theme_ipsum() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text( size=48 )
) +
ylim(0,20) +
ylab("mark") +
xlab("") +
facet_wrap(~name, ncol=4)
df_attitudes %>% ggplot( aes(x=rowname, y=mark)) +
geom_bar(stat="identity", fill="#69b3a2", width=0.6) +
coord_flip() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text( size=48 )
) +
ylim(0,20) +
ylab("mark") +
xlab("") +
facet_wrap(~name, ncol=4)
data <- df_attitudes %>% slice(c(3:6)) %>%
t() %>%
as.data.frame() %>%
add_rownames() %>%
arrange(V1) %>%
mutate(rowname=factor(rowname, rowname)) %>%
gather(key=name, value=mark, -1)
data$name <- recode(data$name, V1 = "q1", V2 = "q2", V3 = "q3", V4 = "q4",V5 = "q5", V6 = "q6")
data %>% ggplot( aes(x=rowname, y=mark)) +
geom_bar(stat="identity", fill="#69b3a2", width=0.6) +
coord_flip() +
theme_ipsum() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text( size=48 )
) +
ylim(0,20) +
ylab("mark") +
xlab("") +
facet_wrap(~name, ncol=4)
install.packages("hrbrthemes")
library(tidyverse)
library(scales)
library(hrbrthemes)
df <- read_csv("clean_survey.csv")
# Factorize the survey responses in an order consistent with negative to positive attitudes towards mental health
df <- df %>%
mutate_at(vars(Gender:obs_consequence), funs(factor(.))) %>%
mutate_at(vars(work_interfere),
funs(fct_relevel(., c("Never", "Rarely", "Sometimes", "Often")))) %>%
mutate_at(vars(no_employees),
funs(fct_relevel(.,c("1-5", "6-25", "26-100", "100-500", "500-1000")))) %>%
mutate_at(vars(leave),
funs(fct_relevel(.,c("Don't know", "Very easy", "Somewhat easy", "Somewhat difficult", "Very difficult")))) %>%
mutate_at(vars(mental_health_consequence, phys_health_consequence),
funs(fct_relevel(., c("Yes","Maybe","No")))) %>%
mutate_at(vars(coworkers, supervisor),
funs(fct_relevel(., c("No","Some of them","Yes")))) %>%
mutate_at(vars(mental_health_interview, phys_health_interview),
funs(fct_relevel(., c("No","Maybe","Yes")))) %>%
mutate_at(vars(mental_vs_physical),
funs(fct_relevel(., c("No","Don't know","Yes")))) %>%
mutate_at(vars(obs_consequence),
funs(fct_relevel(., c("Yes","No"))))
col_backround_info <- colnames(df)[1:12]
col_employer_policies <-c("Does employer provide mental health benefits?" = "benefits",
"Is there available info on care options" = "care_options",
"Has employer discussed mental health as part of a wellness program?" = "wellness_program",
"Are there employer provided resources on how to seek help?" = "seek_help",
"Is anonymity protected if using resources?" = "anonymity",
"How easy is it to take leave for mental health?" = "leave")
col_attitudes <- c("1. Mental Health Consequence" =  "mental_health_consequence",
"2. Physical Health Consequene" = "phys_health_consequence",
"3. Talk with Coworkers" = "coworkers",
"4. Talk with Supervisor" = "supervisor",
"5. Discuss Mental Health at Interview" = "mental_health_interview",
"6. Discuss Physical Health at Interview" = "phys_health_interview",
"7. Mental vs Physical Health" = "mental_vs_physical",
"8. Observed consequences" = "obs_consequence")
df_attitudes <- df %>%
select(col_attitudes) %>%
mutate_all(funs(as.numeric(.))) %>%
mutate_all(funs(rescale(.)))
data <- df_attitudes %>% slice(c(3:6)) %>%
t() %>%
as.data.frame() %>%
add_rownames() %>%
arrange(V1) %>%
mutate(rowname=factor(rowname, rowname)) %>%
gather(key=name, value=mark, -1)
#Recode
data$name <- recode(data$name, V1 = "q1", V2 = "q2", V3 = "q3", V4 = "q4",V5 = "q5", V6 = "q6")
data %>% ggplot( aes(x=rowname, y=mark)) +
geom_bar(stat="identity", fill="#69b3a2", width=0.6) +
coord_flip() +
theme_ipsum() +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.text = element_text( size=48 )
) +
ylim(0,20) +
ylab("mark") +
xlab("") +
facet_wrap(~name, ncol=4)
df_attitudes%>%spread(questions, value)
df_attitudes%>%gather(questions, value)
df_attitudes%>%gather(questions, value) %>% group_by("questions")
df_attitudes%>%gather(questions, value) %>% group_by("questions") %>% summarize(sum)
df_attitudes%>%gather(questions, value) %>% group_by("questions") %>% summarize(n = sum(n))
test <- df_attitudes%>%gather(questions, value)
View(test)
test%>%group_by(questions)%>%summarise(n=count(n))
test%>%group_by("questions","value")%>%count(value)
test%>%group_by(questions,value)%>%count(value)
test_p %>% ggplot(aes(question, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
test_p <-test%>%group_by(questions,value)%>%count(value)
test_p %>% ggplot(aes(question, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
test_p <-test%>%group_by(questions,value)%>%count(value)
test_p %>% ggplot(aes(questions, value, fill = variable)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
test_p %>% ggplot(aes(questions, value, fill =n)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
test_p %>% ggplot(aes(questions, n, fill =value)) +
geom_bar(position = "fill", stat = "identity") +
scale_y_continuous(labels = percent)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
